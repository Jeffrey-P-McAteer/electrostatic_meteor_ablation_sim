#include "eppic.h"

#ifdef USE_MPI
#include "eppic-mpi.h"
#endif



/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     Convert vector into a 2D FArrayND_ranged object
     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
#ifndef HAVE_PETSC
/* if you don't have PETSC, here's a dummy routine */
/* and a dummy Vec definition */
typedef int Vec;
void FArrayND_rangedFromVec2D(FArrayND_ranged &phi, Vec &phiVec, int nx, int ny, int n_exclude=-10)
{
  if (mpi_rank==0) {
    cout << "\tThis version of EPPIC was not configured with PETSC\n"
	 << "\tTherefore, FArrayND_rangedFromVec2D is not available.\n"
	 << "\tPlease recompile with access to PETSC or change your \n"
	 << "\tinput options.";
    terminate(TRUE,"\n");
  }
}

#else
#include "petscvec.h" 


void FArrayND_rangedFromVec2D(FArrayND_ranged &phi, Vec &phiVec, int nx, int ny, int n_exclude=-10)
{
  /* 
     For now get Petsc_based full vector.
     In the future, consider only getting the local part of phi, and 
     manage the communication independantly.
     
     Consider adding this communication option to ArrayND class
  */

  PetscScalar *globalPhiVec;
  int ix,iy,r;
  int rowStart,rowEnd;

  VecGetArray(phiVec,&globalPhiVec);
  VecGetOwnershipRange( phiVec, &rowStart, &rowEnd );

  r=0;
  for (ix=0;ix<nx;ix++)
    {
      for (iy=0;iy<ny;iy++)
	{
	  if (r==n_exclude) continue;
	    phi(ix,iy) = globalPhiVec[r];
	    r++;
	}
    }
      
  VecRestoreArray(phiVec,&globalPhiVec);



}

#endif
