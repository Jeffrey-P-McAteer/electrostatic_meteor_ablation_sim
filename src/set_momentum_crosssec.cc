/* This function will calculate the momentum cross section for an ablated meteor
   particle and the neutral atmosphere.  

   Inputs:
   cross_sec: The cross section in appropriate units that will be calculated.
   vrel: The relative velocity of the particle with the background atmosphere.
   type: The model used to get the momentum cross section.
         0: Constant momentum cross section
	 1: Bronshten 1983, sigma = 5.61*10^(-19)*vrel^(-0.8), vrel in km/s, sigma in m^2
*/


#include <csignal> /* for notify_and_trap */
#include <math.h>
#include "eppic.h"
#include "eppic-mpi.h"

void set_momentum_crosssec(FTYPE &cross_sec, FTYPE vrel, int type, FTYPE lsqsim_to_msq, FTYPE mass)
{
  enum {NO_CHANGE, JONES, ELECTRON, LENNARD_JONES_NN, LENNARD_JONES_IN};

  if (type == NO_CHANGE){
    return;
  } else if (type == JONES){
    cross_sec = (5.61e-19)*pow(vrel,-0.8)/lsqsim_to_msq;
  } else if (type == ELECTRON){
    // electron
    // eV xData from Engelhardt 1964 converted into velocity in m/s
    static FTYPE q = 1.60217662e-19;
    static std::vector<FTYPE> xdata = {
      sqrt(0.000985278*q/mass*2),
      sqrt(0.00183692*q/mass*2),
      sqrt(0.00327565*q/mass*2),
      sqrt(0.0053439*q/mass*2),
      sqrt(0.010416297*q/mass*2),
      sqrt(0.017504762*q/mass*2),
      sqrt(0.028136843*q/mass*2),
      sqrt(0.046588312*q/mass*2),
      sqrt(0.070571807*q/mass*2),
      sqrt(0.094941419*q/mass*2),
      sqrt(0.135533012*q/mass*2),
      sqrt(0.19930441*q/mass*2),
      sqrt(0.310995155*q/mass*2),
      sqrt(0.485277704*q/mass*2),
      sqrt(0.382763711*q/mass*2),
      sqrt(0.615247588*q/mass*2),
      sqrt(0.757228678*q/mass*2),
      sqrt(1.033933849*q/mass*2),
      sqrt(1.350314038*q/mass*2),
      sqrt(1.613353251*q/mass*2),
      sqrt(1.789855767*q/mass*2),
      sqrt(1.871292629*q/mass*2),
      sqrt(1.985667841*q/mass*2),
      sqrt(2.170470789*q/mass*2),
      sqrt(2.337545453*q/mass*2),
      sqrt(2.517480896*q/mass*2),
      sqrt(2.792895912*q/mass*2),
      sqrt(2.963600407*q/mass*2),
      sqrt(3.098441617*q/mass*2),
      sqrt(3.28782136*q/mass*2),
      sqrt(3.540905462*q/mass*2),
      sqrt(3.870451901*q/mass*2),
      sqrt(4.358042542*q/mass*2),
      sqrt(4.907058732*q/mass*2),
      sqrt(5.443896038*q/mass*2),
      sqrt(6.129705557*q/mass*2),
      sqrt(6.700187504*q/mass*2),
      sqrt(7.77139878*q/mass*2),
      sqrt(8.75042175*q/mass*2),
      sqrt(10.0*q/mass*2),
      sqrt(11.77208698*q/mass*2),
      sqrt(12.86769639*q/mass*2),
      sqrt(14.27543569*q/mass*2),
      sqrt(15.83718314*q/mass*2),
      sqrt(17.56978737*q/mass*2),
      sqrt(20.07878919*q/mass*2),
      sqrt(22.60826894*q/mass*2),
      sqrt(25.45640674*q/mass*2),
      sqrt(27.82559402*q/mass*2)};
    static std::vector<FTYPE> ydata = {
      1.34E-20,
      1.47E-20,
      1.63E-20,
      1.81E-20,
      2.17E-20,
      2.57E-20,
      3.17E-20,
      4.03E-20,
      4.83E-20,
      5.62E-20,
      6.63E-20,
      7.83E-20,
      9.10E-20,
      9.67E-20,
      9.52E-20,
      9.81E-20,
      9.96E-20,
      1.03E-19,
      1.14E-19,
      1.35E-19,
      1.74E-19,
      2.05E-19,
      2.46E-19,
      2.74E-19,
      2.91E-19,
      2.91E-19,
      2.65E-19,
      2.18E-19,
      1.88E-19,
      1.66E-19,
      1.45E-19,
      1.29E-19,
      1.16E-19,
      1.04E-19,
      9.96E-20,
      9.52E-20,
      9.38E-20,
      9.24E-20,
      9.24E-20,
      9.24E-20,
      9.38E-20,
      9.81E-20,
      1.04E-19,
      1.11E-19,
      1.14E-19,
      1.16E-19,
      1.12E-19,
      1.07E-19,
      1.07E-19};
    
    int i = 0;
    int xsize = xdata.size();
    if (vrel >= xdata[xsize - 2]){
      i = xsize-2;
    }
    else{
      while (vrel > xdata[i+1] ) i++;
    }
    FTYPE xl = xdata[i], yl = ydata[i], xr = xdata[i+1], yr = ydata[i+1];

    // Do not extrapolate!
    if (vrel < xl) yr=yl;
    if (vrel > xr) yl=yr;

    cross_sec = yl + (yr-yl)/(xr-xl) * (vrel-xl);
  } else if (type == LENNARD_JONES_NN){
    // Use lennard-jones 12-6 potential
    static std::vector<FTYPE> xdata = {
                                       10000.0000000000,
                                       10909.0909090909,
                                       11818.1818181818,
                                       12727.2727272727,
                                       13636.3636363636,
                                       14545.4545454545,
                                       15454.5454545455,
                                       16363.6363636364,
                                       17272.7272727273,
                                       18181.8181818182,
                                       19090.9090909091,
                                       20000.0000000000,
                                       20909.0909090909,
                                       21818.1818181818,
                                       22727.2727272727,
                                       23636.3636363636,
                                       24545.4545454545,
                                       25454.5454545455,
                                       26363.6363636364,
                                       27272.7272727273,
                                       28181.8181818182,
                                       29090.9090909091,
                                       30000.0000000000,
                                       30909.0909090909,
                                       31818.1818181818,
                                       32727.2727272727,
                                       33636.3636363636,
                                       34545.4545454545,
                                       35454.5454545455,
                                       36363.6363636364,
                                       37272.7272727273,
                                       38181.8181818182,
                                       39090.9090909091,
                                       40000.0000000000,
                                       40909.0909090909,
                                       41818.1818181818,
                                       42727.2727272727,
                                       43636.3636363636,
                                       44545.4545454545,
                                       45454.5454545455,
                                       46363.6363636364,
                                       47272.7272727273,
                                       48181.8181818182,
                                       49090.9090909091,
                                       50000.0000000000,
                                       50909.0909090909,
                                       51818.1818181818,
                                       52727.2727272727,
                                       53636.3636363636,
                                       54545.4545454545,
                                       55454.5454545455,
                                       56363.6363636364,
                                       57272.7272727273,
                                       58181.8181818182,
                                       59090.9090909091,
                                       60000.0000000000,
                                       60909.0909090909,
                                       61818.1818181818,
                                       62727.2727272727,
                                       63636.3636363636,
                                       64545.4545454545,
                                       65454.5454545455,
                                       66363.6363636364,
                                       67272.7272727273,
                                       68181.8181818182,
                                       69090.9090909091,
                                       70000.0000000000,
                                       70909.0909090909,
                                       71818.1818181818,
                                       72727.2727272727,
                                       73636.3636363636,
                                       74545.4545454545,
                                       75454.5454545455,
                                       76363.6363636364,
                                       77272.7272727273,
                                       78181.8181818182,
                                       79090.9090909091,
                                       80000.0000000000,
                                       80909.0909090909,
                                       81818.1818181818,
                                       82727.2727272727,
                                       83636.3636363636,
                                       84545.4545454545,
                                       85454.5454545455,
                                       86363.6363636364,
                                       87272.7272727273,
                                       88181.8181818182,
                                       89090.9090909091,
                                       90000.0000000000,
                                       90909.0909090909,
                                       91818.1818181818,
                                       92727.2727272727,
                                       93636.3636363636,
                                       94545.4545454545,
                                       95454.5454545455,
                                       96363.6363636364,
                                       97272.7272727273,
                                       98181.8181818182,
                                       99090.9090909091,
                                       100000.0000000000
    };
    static std::vector<FTYPE> ydata = {
                                       0.179902909691620e-18,
                                       0.175315857285032e-18,
                                       0.170868051832166e-18,
                                       0.166718189359039e-18,
                                       0.162795161403840e-18,
                                       0.159121279804529e-18,
                                       0.155638288093054e-18,
                                       0.152327017804083e-18,
                                       0.149272591930392e-18,
                                       0.146201191497253e-18,
                                       0.143376361859255e-18,
                                       0.140721690642403e-18,
                                       0.137856532249104e-18,
                                       0.135305332480709e-18,
                                       0.132849695463340e-18,
                                       0.130482700199323e-18,
                                       0.128391067956902e-18,
                                       0.126031504750725e-18,
                                       0.123980493041184e-18,
                                       0.121796494403950e-18,
                                       0.119796541355210e-18,
                                       0.117857708804343e-18,
                                       0.115977216460207e-18,
                                       0.114152102640465e-18,
                                       0.112378599352929e-18,
                                       0.110655119670236e-18,
                                       0.108968756642439e-18,
                                       0.107347758446155e-18,
                                       0.105759832726573e-18,
                                       0.104387082751671e-18,
                                       0.102730084487388e-18,
                                       0.101271780296880e-18,
                                       0.099853327990463e-18,
                                       0.098474223482319e-18,
                                       0.097133294884968e-18,
                                       0.095830331002757e-18,
                                       0.094450014304399e-18,
                                       0.093130101438324e-18,
                                       0.091904649735199e-18,
                                       0.090712080465608e-18,
                                       0.089557661626439e-18,
                                       0.088441395443707e-18,
                                       0.087361932494369e-18,
                                       0.086061810099754e-18,
                                       0.084970013426440e-18,
                                       0.083900626986617e-18,
                                       0.082853204247859e-18,
                                       0.081826562474341e-18,
                                       0.080820630469243e-18,
                                       0.079834560686171e-18,
                                       0.078867648145313e-18,
                                       0.077920047387743e-18,
                                       0.076990162978077e-18,
                                       0.076078034442417e-18,
                                       0.075183362278742e-18,
                                       0.074302919257949e-18,
                                       0.073442464631974e-18,
                                       0.072596432195718e-18,
                                       0.071765605445814e-18,
                                       0.070949264536220e-18,
                                       0.070148283571598e-18,
                                       0.069360817910418e-18,
                                       0.068587395390383e-18,
                                       0.067827748876180e-18,
                                       0.067107691413163e-18,
                                       0.066454681062925e-18,
                                       0.065841728498735e-18,
                                       0.064917269986359e-18,
                                       0.064220481031815e-18,
                                       0.063557525293834e-18,
                                       0.062894198160349e-18,
                                       0.062243789395105e-18,
                                       0.061548892666279e-18,
                                       0.060982417223314e-18,
                                       0.060370574706419e-18,
                                       0.059770911945658e-18,
                                       0.059183136036248e-18,
                                       0.058606953539965e-18,
                                       0.058042073974026e-18,
                                       0.057488208960594e-18,
                                       0.056694424692636e-18,
                                       0.056130195355808e-18,
                                       0.055575029643623e-18,
                                       0.055028117170779e-18,
                                       0.054489673987281e-18,
                                       0.053959394414679e-18,
                                       0.053437352871593e-18,
                                       0.052923222686112e-18,
                                       0.052416847926104e-18,
                                       0.051917599171994e-18,
                                       0.051426176587893e-18,
                                       0.050942052852571e-18,
                                       0.050465087163128e-18,
                                       0.049995142687705e-18,
                                       0.049532085941632e-18,
                                       0.049075787085772e-18,
                                       0.048626119426821e-18,
                                       0.048182959405252e-18,
                                       0.047746186652895e-18,
                                       0.047315683677555e-18
    };
    
    int i = 0;
    int xsize = xdata.size();
    if (vrel >= xdata[xsize - 2]){
      i = xsize-2;
    }
    else{
      while (vrel > xdata[i+1] ) i++;
    }
    FTYPE xl = xdata[i], yl = ydata[i], xr = xdata[i+1], yr = ydata[i+1];
    
    // Do not extrapolate!
    if (vrel < xl) yr=yl;
    if (vrel > xr) yl=yr;
    
    cross_sec = yl + (yr-yl)/(xr-xl) * (vrel-xl);
  } else if (type == LENNARD_JONES_IN){
    static std::vector<FTYPE> xdata = {
                                       11818.1818181818,
                                       12727.2727272727,
                                       13636.3636363636,
                                       14545.4545454545,
                                       15454.5454545455,
                                       16363.6363636364,
                                       17272.7272727273,
                                       18181.8181818182,
                                       19090.9090909091,
                                       20000.0000000000,
                                       20909.0909090909,
                                       21818.1818181818,
                                       22727.2727272727,
                                       23636.3636363636,
                                       24545.4545454545,
                                       25454.5454545455,
                                       26363.6363636364,
                                       27272.7272727273,
                                       28181.8181818182,
                                       29090.9090909091,
                                       30000.0000000000,
                                       30909.0909090909,
                                       31818.1818181818,
                                       32727.2727272727,
                                       33636.3636363636,
                                       34545.4545454545,
                                       35454.5454545455,
                                       36363.6363636364,
                                       37272.7272727273,
                                       38181.8181818182,
                                       39090.9090909091,
                                       40000.0000000000,
                                       40909.0909090909,
                                       41818.1818181818,
                                       42727.2727272727,
                                       43636.3636363636,
                                       44545.4545454545,
                                       45454.5454545455,
                                       46363.6363636364,
                                       47272.7272727273,
                                       48181.8181818182,
                                       49090.9090909091,
                                       50000.0000000000,
                                       50909.0909090909,
                                       51818.1818181818,
                                       52727.2727272727,
                                       53636.3636363636,
                                       54545.4545454545,
                                       55454.5454545455,
                                       56363.6363636364,
                                       57272.7272727273,
                                       58181.8181818182,
                                       59090.9090909091,
                                       60000.0000000000,
                                       60909.0909090909,
                                       61818.1818181818,
                                       62727.2727272727,
                                       63636.3636363636,
                                       64545.4545454545,
                                       65454.5454545455,
                                       66363.6363636364,
                                       67272.7272727273,
                                       68181.8181818182,
                                       69090.9090909091,
                                       70000.0000000000,
                                       70909.0909090909,
                                       71818.1818181818,
                                       72727.2727272727,
                                       73636.3636363636,
                                       74545.4545454545,
                                       75454.5454545455,
                                       76363.6363636364,
                                       77272.7272727273,
                                       78181.8181818182,
                                       79090.9090909091,
                                       80000.0000000000,
                                       80909.0909090909,
                                       81818.1818181818,
                                       82727.2727272727,
                                       83636.3636363636,
                                       84545.4545454545,
                                       85454.5454545455,
                                       86363.6363636364,
                                       87272.7272727273,
                                       88181.8181818182,
                                       89090.9090909091,
                                       90000.0000000000,
                                       90909.0909090909,
                                       91818.1818181818,
                                       92727.2727272727,
                                       93636.3636363636,
                                       94545.4545454545,
                                       95454.5454545455,
                                       96363.6363636364,
                                       97272.7272727273,
                                       98181.8181818182,
                                       99090.9090909091,
                                       100000.0000000000
    };
    static std::vector<FTYPE> ydata = {
                                       0.181177987818356e-17,
                                       0.094153128462568e-17,
                                       0.063585832390444e-17,
                                       0.048612803909820e-17,
                                       0.040001111192058e-17,
                                       0.034520063146534e-17,
                                       0.030767555862630e-17,
                                       0.027950992201066e-17,
                                       0.025991086460039e-17,
                                       0.024368452465712e-17,
                                       0.023047775384021e-17,
                                       0.021947595012242e-17,
                                       0.021005719992511e-17,
                                       0.020182786615243e-17,
                                       0.019452290317198e-17,
                                       0.018762375842281e-17,
                                       0.018199109253089e-17,
                                       0.017650469918243e-17,
                                       0.017144067858241e-17,
                                       0.016669568750283e-17,
                                       0.016224182067568e-17,
                                       0.015802347005418e-17,
                                       0.015404426908847e-17,
                                       0.015026112014959e-17,
                                       0.014665320713273e-17,
                                       0.014320355074995e-17,
                                       0.013989790270171e-17,
                                       0.013670605410006e-17,
                                       0.013365305357300e-17,
                                       0.013071283752757e-17,
                                       0.012787704620876e-17,
                                       0.012515909335473e-17,
                                       0.012250353137101e-17,
                                       0.011994358953886e-17,
                                       0.011746576507913e-17,
                                       0.011507825945402e-17,
                                       0.011275127469508e-17,
                                       0.011049447967181e-17,
                                       0.010830427480004e-17,
                                       0.010634992886498e-17,
                                       0.010427117436923e-17,
                                       0.010224649885545e-17,
                                       0.010027326841034e-17,
                                       0.009834430987439e-17,
                                       0.009643353728455e-17,
                                       0.009464110431305e-17,
                                       0.009289673597672e-17,
                                       0.009119882286881e-17,
                                       0.008954581148388e-17,
                                       0.008793618476338e-17,
                                       0.008636824173503e-17,
                                       0.008483127340924e-17,
                                       0.008334312401245e-17,
                                       0.008189272681515e-17,
                                       0.008047887676844e-17,
                                       0.007911953789642e-17,
                                       0.007777471223870e-17,
                                       0.007646318235857e-17,
                                       0.007518389383444e-17,
                                       0.007393589243346e-17,
                                       0.007271806117026e-17,
                                       0.007152992095246e-17,
                                       0.007036971238138e-17,
                                       0.006923739276840e-17,
                                       0.006813196626453e-17,
                                       0.006705255875985e-17,
                                       0.006599842669481e-17,
                                       0.006496900153603e-17,
                                       0.006396338854994e-17,
                                       0.006298105457799e-17,
                                       0.006202118371109e-17,
                                       0.006108325283726e-17,
                                       0.006016686852562e-17,
                                       0.005927027885694e-17,
                                       0.005839511283714e-17,
                                       0.005753925261152e-17,
                                       0.005670207934864e-17,
                                       0.005588377382412e-17,
                                       0.005508333646182e-17,
                                       0.005428997456004e-17,
                                       0.005352534263699e-17,
                                       0.005277631701336e-17,
                                       0.005204380432258e-17,
                                       0.005132709737619e-17,
                                       0.005062657146746e-17,
                                       0.004993961581929e-17,
                                       0.004926779368973e-17,
                                       0.004861057888445e-17,
                                       0.004796685774214e-17,
                                       0.004733681880389e-17,
                                       0.004672009212876e-17,
                                       0.004611572075710e-17,
                                       0.004552467498923e-17,
                                       0.004494511664363e-17,
                                       0.004437805630638e-17,
                                       0.004382265902175e-17,
                                       0.004327806012291e-17,
                                       0.004274449509639e-17
    };
    int i = 0;
    int xsize = xdata.size();
    if (vrel >= xdata[xsize - 2]){
      i = xsize-2;
    }
    else{
      while (vrel > xdata[i+1] ) i++;
    }
    FTYPE xl = xdata[i], yl = ydata[i], xr = xdata[i+1], yr = ydata[i+1];

    // Do not extrapolate!
    if (vrel < xl) yr=yl;
    if (vrel > xr) yl=yr;

    cross_sec = yl + (yr-yl)/(xr-xl) * (vrel-xl);
  } else {
    printf("ERROR! Unknown momentum cross section model: %d!\n", type);
  }  
}
